<% @my_assets = [] %>
<% Asset.all.order(:ticker).each do |my_asset| %>
  <% result = "#{my_asset.name} (#{my_asset.ticker})" %>
  <% @my_assets.push(result)%>
<% end %> 

<div class="pb-1">
  <!-- Button trigger modal -->
  <button type="button" class="btn btn-primary btn-sm button-rounded" style="width: 100px" data-toggle="modal" data-target="#tradeModal">
    Trade
  </button>

  <!-- Modal -->
  <div class="modal fade" id="tradeModal" tabindex="-1" role="dialog" aria-labelledby="tradeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="tradeModalLabel"><%= @portfolio.name %></h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          
          <form class="form" autocomplete="off" action="/trades/new" id="form_trade" >

            <!--Make sure the form has the autocomplete function switched off:-->
              <div class="autocomplete form-group" style="width:100%;">
                <input id="myInput" type="text" name="input_ticker" placeholder="Search for assets to trade..." class="form-control">
              </div>

            <div class="form-group">
              <label for="browser_quantity">Number of shares: </label>
              <input id="browser_quantity" type="text" name="input_quantity" placeholder="Enter a number of shares" class="form-control mb-2 mr-sm-2">
            </div>

            <div class="custom-control custom-radio">
              <input type="radio" id="buy" value="buy" name="tradeType" class="custom-control-input">
              <label class="custom-control-label" for="buy">Buy</label>
            </div>
            <div class="custom-control custom-radio">
              <input type="radio" id="sell" value="sell" name="tradeType" class="custom-control-input">
              <label class="custom-control-label" for="sell">Sell</label>
            </div>
            <div class="body-sm">
              <br />
              Cash Available: <%= number_to_currency(@portfolio.cash_balance) %>
              <br />
              Current Price: </span><span id="my_live_price"></span>
              <br/ >
              <div class="font-weight-bold">Total Proceeds: <span id="total_proceeds"></span></div>
              <br />
            </div>
              

            <input id="portfolio_id" type="hidden" name="portfolio_id" value="<%= @portfolio.id %>">

          </form>

        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" form="form_trade" class="btn btn-primary">Trade</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>

$('input').keyup(function(){ // run anytime the value changes
    var quantity  = Number($('#browser_quantity').val());   // get value of field
    var ticker  = $('#myInput').val().match(/\(([^)]+)\)/)[1];   // get value of field

    $.ajax({
      type: "GET",
      url: "/assets/price",
      data: { ticker : ticker, quantity : quantity},
      dataType: "script"
    });
});

</script>

<script>
  var countries = <%= @my_assets.to_json.html_safe %>;
</script>

<script>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if ((arr[i].toUpperCase()).includes(val.toUpperCase())) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          p = arr[i].toUpperCase().indexOf(val.toUpperCase())
          b.innerHTML = arr[i].substr(0, p) + '<b>' + arr[i].substr(p, val.length) + '</b>' + arr[i].substr(p + val.length, arr[i].length - p - val.length) ;
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
      });
}
</script>

<script>
  autocomplete(document.getElementById("myInput"), countries);
</script>